name: VersionUpgrade

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Bump Version (e.g., v1.1.1)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  version-update:
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pull-request-number }}
      pr-url: ${{ steps.create-pr.outputs.pull-request-url }}
    
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format v0.0.0"
            exit 1
          fi
          echo "Version format validated: ${{ inputs.version }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create version branch
        run: |
          BRANCH_NAME="version-update-${{ inputs.version }}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update package version
        run: |
          VERSION="${{ inputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          echo "Updating version to $VERSION_NO_V"
          npm version "$VERSION_NO_V" --no-git-tag-version
          echo "VERSION_NO_V=$VERSION_NO_V" >> $GITHUB_ENV

      - name: Commit version changes
        run: |
          git add package.json package-lock.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: bump version to ${{ inputs.version }}"
            echo "Changes committed successfully"
          fi

      - name: Push version branch
        run: |
          git push origin "$BRANCH_NAME"
          echo "Branch pushed: $BRANCH_NAME"

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: process.env.BRANCH_NAME,
              base: 'main',
              title: `chore: release version ${{ inputs.version }}`,
              body: `## Version Update: ${{ inputs.version }}
            
              This PR updates the package version to ${{ inputs.version }}.
            
              ### Changes
              - Updated package.json version to ${{ env.VERSION_NO_V }}
              - Updated package-lock.json`
            });
            
            core.setOutput('pull-request-number', pr.number);
            core.setOutput('pull-request-url', pr.html_url);
            
            console.log(`Pull request created: #${pr.number}`);
            console.log(`URL: ${pr.html_url}`);

  wait-for-merge:
    needs: version-update
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for PR merge or approval
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.version-update.outputs.pr-number }};
            console.log(`Monitoring PR #${prNumber} for merge status`);
            
            let merged = false;
            let attempts = 0;
            const maxAttempts = 120;
            
            while (!merged && attempts < maxAttempts) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
            
              if (pr.merged) {
                console.log(`PR #${prNumber} has been merged successfully`);
                merged = true;
                break;
              }
            
              if (pr.state === 'closed' && !pr.merged) {
                console.log(`PR #${prNumber} was closed without merging`);
                core.setFailed('Pull request was closed without merging');
                return;
              }
            
              // Check if PR has required approvals
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
            
              const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
              if (approvedReviews.length > 0) {
                console.log(`PR #${prNumber} has ${approvedReviews.length} approval(s)`);
              }
            
              console.log(`Attempt ${attempts + 1}/${maxAttempts}: PR status - ${pr.state}`);
              attempts++;
            
              if (attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 60000)); // Wait 1 minute
              }
            }
            
            if (!merged) {
              console.log('Timeout waiting for PR merge. Manual intervention may be required.');
              core.setFailed('Timeout waiting for PR to be merged');
            }

  create-tag:
    needs: [version-update, wait-for-merge]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT_TOKEN }}
          ref: main

      - name: Pull latest changes
        run: git pull origin main

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          TAG="${{ inputs.version }}"
          echo "Creating tag: $TAG"
          
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists"
            git tag -d "$TAG" || true
            git push origin ":refs/tags/$TAG" || true
            echo "Removed existing tag $TAG"
          fi
          
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "Tag $TAG created and pushed successfully"

      - name: Create draft release
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ inputs.version }}';
            
            try {
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Black Duck Security Scan ${tagName}`,
                body: `## Black Duck Security Scan ${tagName}
            
                ### Changes
                - Version bump to ${tagName}`,
                draft: true,
                prerelease: false
              });
            
              console.log(`Draft release created: ${release.html_url}`);
              console.log(`Release ID: ${release.id}`);
            
            } catch (error) {
              if (error.status === 422) {
                console.log(`Release for tag ${tagName} already exists`);
              } else {
                throw error;
              }
            }

      - name: Workflow completion summary
        run: |
          echo "=== Version Update Workflow Completed ==="
          echo "Version: ${{ inputs.version }}"
          echo "PR Number: ${{ needs.version-update.outputs.pr-number }}"
          echo "PR URL: ${{ needs.version-update.outputs.pr-url }}"
          echo "Tag created: ${{ inputs.version }}"
          echo "Draft release created - ready for marketplace publishing"