name: sync-tags

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'SYNC VERSION'
        default: ""
        type: string
      update_latest_tag:
        description: 'Update latest tag'
        required: false
        default: true
        type: boolean
      update_major_tag:
        description: 'Update major version tag'
        required: false
        default: true
        type: boolean

jobs:
  sync-tags:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: set-version
        run: |
          version="${{ github.event.inputs.version }}"
          if [ -z "$version" ]; then
            version=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n 1)
            [ -z "$version" ] && echo "Error: No version tags found. Ensure at least one valid version tag exists."  && exit 1
          fi
          version=${version#v}
          echo "VERSION=$version" >> $GITHUB_ENV

          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            echo "MAJOR=$major" >> $GITHUB_ENV
            echo "Parsed version - Major: $major"
          else
            echo "Error: Invalid version format. Expected format: x.y.z. Found: $version"
            exit 1
          fi

      - name: Validate version tag exists
        run: |
          if ! git tag --list | grep -q "^v${{ env.VERSION }}$"; then
            echo "Error: Tag v${{ env.VERSION }} does not exist. Ensure the correct version is provided."
            git tag --list | sort -V
            exit 1
          fi
          echo "Tag v${{ env.VERSION }} exists"

      - name: Update major version tag
        if: ${{ github.event.inputs.update_major_tag == 'true' }}
        run: |
          major_tag="v${{ env.MAJOR }}"
          echo "Updating major version tag: $major_tag"

          # Delete existing major tag if it exists
          if git tag --list | grep -q "^$major_tag$"; then
            echo "Deleting existing local tag: $major_tag"
            git tag -d $major_tag
          fi
          if git ls-remote --tags origin | grep -q "refs/tags/$major_tag$"; then
            echo "Deleting existing remote tag: $major_tag"
            git push origin :refs/tags/$major_tag
          fi

          # Create new major tag
          echo "Creating new major tag: $major_tag -> v${{ env.VERSION }}"
          git tag $major_tag v${{ env.VERSION }}
          git push origin $major_tag

      - name: Update latest tag
        if: ${{ github.event.inputs.update_latest_tag == 'true' }}
        run: |
          latest_tag="latest"
          echo "Updating latest tag"

          # Delete existing latest tag if it exists
          if git tag --list | grep -q "^$latest_tag$"; then
            echo "Deleting existing local tag: $latest_tag"
            git tag -d $latest_tag
          fi
          if git ls-remote --tags origin | grep -q "refs/tags/$latest_tag$"; then
            echo "Deleting existing remote tag: $latest_tag"
            git push origin :refs/tags/$latest_tag
          fi

          # Create new latest tag
          echo "Creating new latest tag: $latest_tag -> v${{ env.VERSION }}"
          git tag $latest_tag v${{ env.VERSION }}
          git push origin $latest_tag

      - name: Summary
        run: |
          echo "=== TAG SYNC SUMMARY ==="
          echo "Current tags pointing to v${{ env.VERSION }}:"
          git tag --points-at v${{ env.VERSION }} | sort