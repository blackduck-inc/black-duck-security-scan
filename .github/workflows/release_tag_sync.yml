name: Sync Tags

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-tags:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_BOT_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest release
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            COMMIT_HASH="${{ github.sha }}"
          else
            # Get latest release from API
            LATEST=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            RELEASE_TAG=$(echo "$LATEST" | jq -r '.tag_name')
            COMMIT_HASH=$(echo "$LATEST" | jq -r '.target_commitish')
          
            # If no releases, get latest tag
            if [[ "$RELEASE_TAG" == "null" ]]; then
              git fetch --tags
              RELEASE_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
              COMMIT_HASH=$(git rev-list -n 1 "$RELEASE_TAG")
            fi
          fi
          
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "Latest release: $RELEASE_TAG ($COMMIT_HASH)"

      - name: Extract major version
        run: |
          MAJOR=$(echo "${{ env.RELEASE_TAG }}" | sed 's/^v\([0-9]*\).*/\1/')
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "Major version: $MAJOR"

      - name: Update major tag
        run: |
          MAJOR_TAG="v${{ env.MAJOR }}"
          
          # Delete existing tag
          git tag -d "$MAJOR_TAG" 2>/dev/null || true
          git push origin ":refs/tags/$MAJOR_TAG" 2>/dev/null || true
          
          # Create new tag pointing to release commit
          git tag -a "$MAJOR_TAG" "${{ env.COMMIT_HASH }}" -m "Major version $MAJOR_TAG"
          git push origin "$MAJOR_TAG"
          
          echo "Updated $MAJOR_TAG -> ${{ env.COMMIT_HASH }}"

      - name: Update latest tag
        run: |
          LATEST_TAG="latest"
          
          # Delete existing tag
          git tag -d "$LATEST_TAG" 2>/dev/null || true
          git push origin ":refs/tags/$LATEST_TAG" 2>/dev/null || true
          
          # Create new tag pointing to release commit
          git tag -a "$LATEST_TAG" "${{ env.COMMIT_HASH }}" -m "Latest release ${{ env.RELEASE_TAG }}"
          git push origin "$LATEST_TAG"
          
          echo "Updated $LATEST_TAG -> ${{ env.COMMIT_HASH }}"

      - name: Summary
        run: |
          echo "  Tags updated Successfully."
          echo "  v${{ env.MAJOR }} -> ${{ env.COMMIT_HASH }}"
          echo "  latest -> ${{ env.COMMIT_HASH }}"
          echo "  Based on release: ${{ env.RELEASE_TAG }}"
