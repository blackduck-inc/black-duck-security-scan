name: upgrade-actions-version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'ACTION VERSION'
        required: true
        default: ""
        type: string

jobs:
  upgrade-actions-version:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 16.x
        uses: actions/setup-node@v4
        with:
          node-version: 16.x

      - name: Install dependencies
        run: npm ci

      - name: Rebuild the dist/ directory
        run: |
          npm run build
          npm run package

      - name: Compare the expected and actual dist/ directories
        run: |
          if [ "$(git diff --ignore-space-at-eol dist/ | wc -l)" -gt "0" ]; then
            echo "Detected uncommitted changes after build.  See status below:"
            git diff
            exit 1
          fi
        id: diff

      - name: versioning
        id: version-update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          action_name=$(jq -r '.name' < package.json) 
          echo "ACTION_NAME=$action_name" >> $GITHUB_ENV
          echo "ACTION NAME: "$action_name
          input_version=${{ github.event.inputs.version }}
          current_version=$(echo "$input_version" | sed 's/^v//')
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
          echo "CURRENT ACTION VERSION: " $current_version
          
          new_version=$current_version
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New version to update: ${new_version}"

      - name: update action version in files
        id: update-action-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating action version in package.json and package-lock.json files"
          git config --local user.name "$(git log -n 1 --pretty=format:%an)"
          git config --local user.email "$(git log -n 1 --pretty=format:%ae)"
          git config set advice.addIgnoredFile false
          git checkout -b action_version_update
          
          echo "Running npm version to update version to ${{ env.NEW_VERSION }}"
          npm version ${{ env.NEW_VERSION }} --no-git-tag-version
          
          echo "Rebuilding after version update"
          npm run build && npm run package
          
          echo "Adding updated files to git"
          git add package.json package-lock.json dist/
          
          git commit -am "upgrade action version to ${{ env.NEW_VERSION }} [skip ci]"
          git push origin action_version_update --force
          
          gh pr create --base main --head action_version_update --title "Action version upgrade to ${{ env.NEW_VERSION }}" --body "${{ env.ACTION_NAME }} version upgrade to ${{ env.NEW_VERSION }}" --fill
          
          echo "Successfully updated action version in package.json and package-lock.json files..."